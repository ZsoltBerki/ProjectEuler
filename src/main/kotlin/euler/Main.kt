@file:JvmName("Main")
package euler

import euler.utils.countNorthEastLatticePaths
import euler.utils.findLargestPalindrome
import euler.utils.findNthPrime
import euler.utils.generateFibonacci
import euler.utils.getLargestPrimeFactor
import euler.utils.getMultipliesOf
import euler.utils.getSmallestEvenlyDivisible
import euler.utils.getSquareOfSums
import euler.utils.getSumOfSquares
import euler.utils.isPythagoreanTriplet
import euler.utils.toByteList
import euler.utils.windowMap

fun main() {
    println("Hello, Euler!")
    task9()
}

/**
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
fun task1() {
    println("Task 1")
    val multipliesOfFive = getMultipliesOf(5, 1000)
    val multipliesOfThree = getMultipliesOf(3, 1000)
    val multipliesOfFiveAndThree = multipliesOfFive.union(multipliesOfThree)
    println(multipliesOfFiveAndThree)
    println(multipliesOfFiveAndThree.sum())
}

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */
fun task2() {
    println("Task 2")
    val threshold = 4000000
    val result = generateFibonacci(threshold)
        .filter { it % 2 == 0 }
        .sum()
    println("The result is $result")
}

/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 */
fun task3() {
    println("Task 3")
    val targetNumber = 600851475143
    val result = getLargestPrimeFactor(targetNumber)
    println("The result is $result")
}

/**
 * A palindromic number reads the same both ways.
 * The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
fun task4() {
    println("Task 4")
    val result = findLargestPalindrome(3)
    println("The result is $result")
}

/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
fun task5() {
    println("Task 5")
    val dividers = (2L..20L).toList()
    val result = getSmallestEvenlyDivisible(dividers)
    println("The result is $result")
}

/**
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
fun task6() {
    println("Task 6")
    val numbers = (1..100).toList().map { it.toFloat() }
    val sumOfSquares = getSumOfSquares(numbers)
    val squareOfSums = getSquareOfSums(numbers)
    val result = (squareOfSums - sumOfSquares).toLong()
    println("The result is $result")
}

/**
 * What is the 10 001st prime number?
 */
fun task7() {
    println("Task 7")
    println("The result is ${findNthPrime(10001)}")
}

/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
fun task8() {
    println("Task 8")
    val originalList =
        """
            73167176531330624919225119674426574742355349194934
            96983520312774506326239578318016984801869478851843
            85861560789112949495459501737958331952853208805511
            12540698747158523863050715693290963295227443043557
            66896648950445244523161731856403098711121722383113
            62229893423380308135336276614282806444486645238749
            30358907296290491560440772390713810515859307960866
            70172427121883998797908792274921901699720888093776
            65727333001053367881220235421809751254540594752243
            52584907711670556013604839586446706324415722155397
            53697817977846174064955149290862569321978468622482
            83972241375657056057490261407972968652414535100474
            82166370484403199890008895243450658541227588666881
            16427171479924442928230863465674813919123162824586
            17866458359124566529476545682848912883142607690042
            24219022671055626321111109370544217506941658960408
            07198403850962455444362981230987879927244284909188
            84580156166097919133875499200524063689912560717606
            05886116467109405077541002256983155200055935729725
            71636269561882670428252483600823257530420752963450
        """.trimIndent().toByteList()

    val result = originalList.windowMap(13) {
        window ->
        window.fold(1L) { acc: Long, i: Byte -> acc * i.toLong() }
    }.maxOrNull()

    println("The result is $result")
}

/**
 * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 * Find the product abc.
 */
fun task9(){
    (1000 downTo 3).forEach { c: Int ->
        ((c-1) downTo 2).forEach { b: Int ->
            ((b-1) downTo 1).forEach { a: Int ->
                if(isPythagoreanTriplet(a, b, c) && (a + b + c) == 1000) {
                    println("The result is ${a * b * c}")
                    return
                }
            }
        }
    }
}

/**
 * Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down,
 * there are exactly 6 routes to the bottom right corner.
 * How many such routes are there through a 20×20 grid?
 */
fun task15() {
    println("Task 15")
    println("The result is ${countNorthEastLatticePaths(20)}")
}