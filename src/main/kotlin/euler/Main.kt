@file:JvmName("Main")
package euler

import euler.utils.generateFibonacci
import euler.utils.getLargestPrimeFactor
import euler.utils.getMultipliesOf

fun main() {
    println("Hello, Euler!")
    task3()
}

/**
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
fun task1() {
    println("Task 1")
    val multipliesOfFive = getMultipliesOf(5, 1000)
    val multipliesOfThree = getMultipliesOf(3, 1000)
    val multipliesOfFiveAndThree = multipliesOfFive.union(multipliesOfThree)
    println(multipliesOfFiveAndThree)
    println(multipliesOfFiveAndThree.sum())
}

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */
fun task2() {
    println("Task 2")
    val threshold = 4000000
    val result = generateFibonacci(threshold)
        .filter { it % 2 == 0 }
        .sum()
    println("The result is $result")
}

/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 */
fun task3() {
    println("Task 3")
    val targetNumber = 600851475143
    val result = getLargestPrimeFactor(targetNumber)
    println("The result is $result")
}